/**
 * WakeDock Dashboard Service Worker
 * Provides offline functionality and caching for PWA features
 */

/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';

// Service worker context
declare const self: ServiceWorkerGlobalScope;

// Simple interface for pending actions
interface PendingAction {
  id: string;
  url: string;
  options: RequestInit;
}

// Cache configuration
const CACHE_NAME = `wakedock-cache-${version}`;
const STATIC_CACHE_NAME = `wakedock-static-${version}`;
const API_CACHE_NAME = `wakedock-api-${version}`;

// Cache static assets on install
const staticAssets = ['/', ...build, ...files];

// Install event - cache static assets
self.addEventListener('install', (event: ExtendableEvent) => {
  console.log('[SW] Installing service worker...');
  event.waitUntil(
    caches
      .open(STATIC_CACHE_NAME)
      .then((cache) => {
        console.log('[SW] Caching static assets');
        return cache.addAll(staticAssets);
      })
      .then(() => {
        console.log('[SW] Installation complete');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('[SW] Installation failed:', error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event: ExtendableEvent) => {
  console.log('[SW] Activating service worker...');
  event.waitUntil(
    caches
      .keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames
            .filter((name) => name !== STATIC_CACHE_NAME && name !== API_CACHE_NAME)
            .map((name) => {
              console.log('[SW] Deleting old cache:', name);
              return caches.delete(name);
            })
        );
      })
      .then(() => {
        console.log('[SW] Activation complete');
        return self.clients.claim();
      })
      .catch((error) => {
        console.error('[SW] Activation failed:', error);
      })
  );
});

// Fetch event - handle network requests
self.addEventListener('fetch', (event: FetchEvent) => {
  const request = event.request;
  const url = new URL(request.url);

  // Skip non-GET requests and let them pass through normally
  if (request.method !== 'GET') {
    console.log('[SW] Handling non-GET request:', request.method, url.pathname);
    event.respondWith(
      fetch(request)
        .then((response) => {
          console.log('[SW] Non-GET response:', response.status, url.pathname);
          return response;
        })
        .catch((error: any) => {
          console.error('[SW] Network error for non-GET request:', error);
          return new Response(JSON.stringify({ error: 'Network Error', message: error?.message || 'Unknown error' }), {
            status: 503,
            headers: { 'Content-Type': 'application/json' }
          });
        })
    );
    return;
  }

  // Handle API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request));
    return;
  }

  // Handle static assets
  if (isStaticAsset(url.pathname)) {
    event.respondWith(handleStaticAsset(request));
    return;
  }

  // Handle navigation requests
  if (request.mode === 'navigate') {
    event.respondWith(handleNavigation(request));
    return;
  }

  // Default: network first, fallback to cache
  event.respondWith(
    fetch(request)
      .catch(() => caches.match(request))
      .then((response) => response || new Response('Offline', { status: 503 }))
  );
});

// Handle API requests with cache-first strategy for cacheable endpoints
async function handleApiRequest(request: Request): Promise<Response> {
  const url = new URL(request.url);

  console.log('[SW] Handling API request:', request.method, url.pathname);

  // GET requests to certain endpoints can be cached
  if (
    request.method === 'GET' &&
    (url.pathname.includes('/services') ||
      url.pathname.includes('/status') ||
      url.pathname.includes('/health'))
  ) {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      console.log('[SW] Serving from cache:', url.pathname);
      // Update cache in background
      fetch(request)
        .then((response) => {
          if (response.ok) {
            caches.open(API_CACHE_NAME).then((cache) => cache.put(request, response.clone()));
          }
        })
        .catch(() => {
          // Ignore network errors for background updates
        });

      return cachedResponse;
    }
  }

  // Network first for all API requests
  try {
    console.log('[SW] Fetching from network:', url.pathname);
    const response = await fetch(request);

    // Cache successful GET responses
    if (response.ok && request.method === 'GET') {
      const cache = await caches.open(API_CACHE_NAME);
      cache.put(request, response.clone());
    }

    console.log('[SW] Network response:', response.status, url.pathname);
    return response;
  } catch (error) {
    console.error('[SW] Network error for API request:', error, url.pathname);

    // Fallback to cache for GET requests
    if (request.method === 'GET') {
      const cachedResponse = await caches.match(request);
      if (cachedResponse) {
        console.log('[SW] Serving from cache fallback:', url.pathname);
        return cachedResponse;
      }
    }

    return new Response(JSON.stringify({ error: 'Network Error', message: (error as Error)?.message || 'Unknown error' }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Handle static assets with cache-first strategy
async function handleStaticAsset(request: Request): Promise<Response> {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }

  try {
    const response = await fetch(request);

    if (response.ok) {
      const cache = await caches.open(STATIC_CACHE_NAME);
      cache.put(request, response.clone());
    }

    return response;
  } catch (error) {
    return new Response('Asset not found', { status: 404 });
  }
}

// Handle navigation requests
async function handleNavigation(request: Request): Promise<Response> {
  try {
    const response = await fetch(request);
    return response;
  } catch (error) {
    // Fallback to cached index.html for SPA routing
    const cachedResponse = await caches.match('/');
    if (cachedResponse) {
      return cachedResponse;
    }

    return new Response('Offline', { status: 503 });
  }
}

// Check if URL is a static asset
function isStaticAsset(pathname: string): boolean {
  return (
    pathname.startsWith('/_app/') ||
    pathname.startsWith('/assets/') ||
    pathname.endsWith('.js') ||
    pathname.endsWith('.css') ||
    pathname.endsWith('.png') ||
    pathname.endsWith('.jpg') ||
    pathname.endsWith('.svg') ||
    pathname.endsWith('.ico')
  );
}

// Background sync for offline actions (simplified)
self.addEventListener('sync', (event: any) => {
  console.log('[SW] Background sync triggered:', event.tag);

  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync(): Promise<void> {
  console.log('[SW] Performing background sync');
  // Simplified implementation
}

// Push notification handling
self.addEventListener('push', (event: PushEvent) => {
  console.log('[SW] Push notification received');

  const options = {
    body: 'WakeDock notification',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    tag: 'wakedock-notification',
    data: {
      url: '/',
    },
  };

  event.waitUntil(self.registration.showNotification('WakeDock', options));
});

self.addEventListener('notificationclick', (event: NotificationEvent) => {
  console.log('[SW] Notification clicked:', event.notification.tag);

  event.notification.close();

  event.waitUntil(self.clients.openWindow('/'));
});

// Helper function to remove pending action
async function removePendingAction(id: string): Promise<void> {
  console.log('[SW] Removing pending action:', id);
}

// Message handling for communication with the main application
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  console.log('[SW] Message received:', event.data);

  if (event.data?.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

console.log('[SW] Service worker loaded');
